				MATPLOTLIB

Matplotlib is a cross-platform, data visualization and graphical plotting 
library (histograms, scatter plots, bar charts, etc) for Python and 
its numerical extension NumPy. As such, it offers a viable open source 
alternative to MATLAB. Developers can also use matplotlibâ€™s APIs
(Application Programming Interfaces) to embed plots in GUI applications.


matplotlib = data visvaligation package
	-> pyplot
	-> pylab


-> Line chart
-> Bar chart
-> Histogram
-> scatter polt
-> pie plot

Note:

import mataplotlib pyplot as plt   OR  import mataplotlib from pyplot as plt

-----> 
	plt.plot, plt.title, plt.xlabel, plt.ylabel, xticks( ) , 
	yticks( ) , xlabel( ) , ylabel( ) , xlim( ) , ylim( ) 
	-> linewidth=(lw)
	-> linecolor=(c)
	-> Edge color = (mec="")
	-> face color = (mfc="")
	-> single char = 
	(r,b,w,k,c,m,,,,,,)
	Linestyle
	-> line = (ls)=(________)
	-> dotted = .......
	-> dashed = --------
	-> dashdot = -.-.-.-.-
	-> plt.grid = grid fuction is used to disply grid line on x-axis and y-axis 
	->subplot is multiple plots in a single figure
	plt.subplot(1,2,1) =(1 row, 2 column, 1 index)
	plt.subplot(2,2,2) = (2 row, 2 column, 2 index)


e,g1

from matplotlib import pyplot as plt
x=[10,20,30]
y=[10,20,30]
plt.plot(x,y)
plt.title("simple line point")
plt.xlabel("x-Axis")
plt.ylabel("y-Axis")
plt.show()

========= > Markers

Representation of point in grap/chart
x axis or y axis

==>STYLES

-> O = Circle
-> S = Squarel
-> D = Diamond
-> P = Pentagon
-> h = Hexagon
-> . = Point
-> * = star
-> + = plus
-> | = vertical line
-> - = horizontal line 

==> color 
-> Edge color = (mec="")
-> face color = (mfc="")
-> single char = 
(r,b,w,k,c,m,,,,,,)

==>Hexadecimal

==>size = (ms="")


e,g2

from matplotlib import pyplot as plt
import numpy as np
x = np.arange(0,20,2)
y = x**2
print(x,y)
plt.plot(x,y,marker="r", ms="25", mec="k", mfc="r")
plt.show()

======> LINES
plt.polt(x,y,ls="dotted",lw=20,c="b")

Linestyle
line = (ls)=(________)
dotted = .......
dashed = --------
dashdot = -.-.-.-.-

linewidth=(lw)
linecolor=(c)

e,g

from matplotlib import pyplot as plt
OAOAOAimport numpy as np
OAOAOAx = np.arange(0,20,4)
y = x*2
print(x,y)
plt.plot(x,y,marker="D", ls="dashed", lw=20, c="g", ms=10, mec="y", mfc="b")
OAOAOAplt.title("simple grph demo")
plt.show()

====> Multiple line single grpha

OAOAOAfrom matplotlib import pyplot as plt
import numpy as np
x = np.arange(0,20,4)
y1 = x*2
y2 = x**2
y3 = x**3
print(x,y1,y2,y3) or
			print(x,y1)
			print(x,y2)
			print(x,y3)

plt.plot(x,y1,x,y2,x,y3) or
			plt.plot(x,y1)
			plt.plot(x,y2)
			plt.plot(x,y3)

plt.title("simple grph demo")
plt.show()


eg.2(multiple line everything is same ex,color,ls,lw,markers)

from matplotlib import pyplot as plt
import numpy as np
x = np.arange(0,20,4)
y1 = x*2
y2 = x**2
y3 = x**3
print(x,y1,y2,y3)
plt.plot(x,y1,x,y2,x,y3,marker="d",ls="dotted",lw="2",mec="r",mfc="r",c="b")
plt.title("simple grph demo")
plt.show()

e,g3 (multiple line different )

from matplotlib import pyplot as plt
import numpy as np
x = np.arange(0,20,4)
y1 = x*2
y2 = x**2
y3 = x**3
print(x,y1,y2,y3)
plt.plot(x,y1,marker="d",ls="dotted",lw="2",mec="r",mfc="r",c="b")
plt.plot(x,y2,marker=">",ls="dashdot",lw="4",mec="g",mfc="g",c="b")
plt.plot(x,y3,marker="*",ls="dashed",lw="3",mec="y",mfc="y",c="b")
plt.title("simple grph demo")
plt.show()

=====> FONT PROPERTIES ON TITLE AND LABELS

#chenge the properties on title, label, color and size

e,g

from matplotlib import pyplot as plt
import numpy as np
x = np.arange(0,20,4)
y = x*10
print(x,y)
plt.plot(x,y)
f1={'family':'arial','color':'blue','size':20} ## arial means arial font family
plt.title("multiples of 10",fontdict=f1)
plt.xlabel("x - values",fontdict=f1)
plt.ylabel("y Multiple 10",fontdict=f1)
plt.show()


from matplotlib import pyplot as plt
import numpy as np
x = np.arange(0,20,4)
y = x*10
print(x,y)
plt.plot(x,y)
f1={'family':'arial','color':'blue','size':20} ## arial means arial font family
f2={'family':'calibri','color':'blue','size':20} ## calibri means calibri font family
plt.title("multiples of 10",fontdict=f1) ## f1 is dictionary
plt.xlabel("x - values",fontdict=f2)
plt.ylabel("y Multiple 10",fontdict=f2)
plt.show()


===========> GRID FUNCTION WITH LINE PROPERTIES IN MATPLOTLIB
 grid fuction is used to disply grid line on x-axis and y-axis 

ex
from matplotlib import pyplot as plt
import numpy as np
x = [1,2,3,4,5,6]
y = [1,2,3,4,5,6]
plt.plot(x,y)
plt.grid(axis="both",ls="dotted",lw=1,c="blue")
plt.show()


=================> SUBPLOTS IN MATPLOTLIB
 subplot is multiple plots in a single figure

Subplot(R(row), C(column), I(index of plot))

exp
plt.subplot(1,2,1) =(1 row, 2 column, 1 index)
plt.subplot(2,2,2) = (2 row, 2 column, 2 index)


e,g

from matplotlib import pyplot as plt
import numpy as np
x = [1,2,3,4,5,6]
y1 = [10,20,30,40,50,60]
y2 = [20,30,50,40,60,10]
y3 = [60,30,50,20,60,10]
y4 = [10,30,50,50,60,10]
plt.suptitle("multiple plots")

plt.subplot(2,2,1)
plt.plot(x,y1)
plt.title("PLOT-1")

plt.subplot(2,2,2)
plt.plot(x,y2)
plt.title("PLOT-2")

plt.subplot(2,2,3)
plt.plot(x,y3)
plt.title("PLOT-3")

plt.subplot(2,2,4)
plt.plot(x,y4)
plt.title("PLOT-4")
plt.show()

===============> LEGEND FUNCTION IN MATPLOTLIB 
A legend is an area describing the elements of the graph. 
In the matplotlib library, thereâ€™s a function called legend() 
which is used to Place a legend on the axes.

E,g

from matplotlib import pyplot as plt
import numpy as np
x=np.arange(0,15,1)
y1=x**2
y2=x**3
    # plt.plot(x,y1,x,y2)
plt.plot(x,y1,label="SQUARES")
plt.plot(x,y2,label="CUBES")

plt.legend(loc="upper left",framealpha=1,facecolor="yellow",edgecolor="blue",fancybox="true,shadow=true,fontsize=15'")
plt.show()

note: framealpha 0 or 1 only


======================> SCATTER PLOT IN MATPLOTLIB

Note:
pyplot.scatter(x,y) = 1 plot= blue -> default
pyplot.scatter(x,y) = 2 plot= orange -> default

e,g
from matplotlib import pyplot as plt
import random
x = [1,2,3,4,5,6,7,8,9,10]
y = [10,20,30,40,50,60,70,80,90,100]
random.shuffle(y)

plt.scatter(x,y,color="black",marker="d",s=15,lw=5,alpha=0.5)

x1 = [1,2,3,4,5,6,7,8,9,10]
y1 = [10,20,30,40,50,60,70,80,90,100]
random.shuffle(y1)

plt.scatter(x1,y1,color="green",marker="^",s=15,lw=5)
plt.show()

eg,2

from matplotlib import pyplot as plt
x=[10,20,30,40,50]
y=[100,200,300,400,500]
colors=["red","green","blue","black","pink"]
size=[50,100,200,300,400]

plt.scatter(x,y,c=colors,s=size,cmap="rainbow",alpha=0.5)
plt.colorbar()
plt.show()

=====> BAR CHART
e,g 1  it is scatter BAR chart

+++  this one vartical line

from matplotlib import pyplot as plt

years=["2017","2018","2019","2020"]
placements=[150,275,258,100]

cse=[75,80,47,82]
it=[46,58,35,52]
ece=[67,59,72,60]

ece_start=[cse[i]+it[i] for i in range(len(cse))]

plt.title("placements comparision")
plt.bar(years,cse,width=0.4,color='red')
plt.bar(years,it,bottom=cse,width=0.4,color='yellow')
plt.bar(years,ece,bottom=it,width=0.4,color='black')


plt.ylim(0,200)
plt.show()



e,g 2 [horizental] Barh chart

note:left(bottom),barh(bar),Height(width)

from matplotlib import pyplot as plt

years=["2017","2018","2019","2020"]
placements=[150,275,258,100]

cse=[75,80,47,82]
it=[46,58,35,52]
ece=[67,59,72,60]

ece_start=[cse[i]+it[i] for i in range(len(cse))]

plt.title("placements comparision")
plt.barh(years,cse,height=0.4,color='red',label="cse")
plt.barh(years,it,left=cse,height=0.4,color='yellow',label="it")
plt.barh(years,ece,left=it,height=0.4,color='black',label="ece")

plt.xlabel("placements")
plt.ylabel("Years")
plt.legend()

plt.show()

==================GROUPED BAR CHART || MULTIPLE BAR CHART WITH EXAMPLE 


from matplotlib import pyplot as plt
import numpy as np

years=["2017","2018","2019","2020"]

cse=[75,80,47,82]
it=[46,58,35,52]
ece=[67,59,72,60]
eee=[53,45,57,41]
w =0.2
plt.figure(figsize=(10,5))

#LOCATION TO PLOT
cse_bar=np.arange(len(years))
it_bar=[i+w for i in cse_bar]
ece_bar=[c+w for c in it_bar]
eee_bar=[e+w for e in ece_bar]


#print(cse_bar)
plt.bar(cse_bar,cse,width=w,label="cse",color="orange")

#print(it_bar)
plt.bar(it_bar,it,width=w,label="it",color="pink")

#print(ece_bar)
plt.bar(ece_bar,ece,width=w,label="ece",color="red")

#print(eee_bar)
plt.bar(eee_bar,eee,width=w,label="eee",color="yellow")

plt.xticks(cse_bar+w+w/2,year)  #midel of the year 


plt.title("Placement Comparision")
plt.xlabel("Y E A R S")
plt.ylabel("Placement Count")
plt.legend()
plt.show()

==================>PIE CHART IN MATPLOTLIB || PIE GRAPH || PIE PLOT IN MATPLOTLIB

--> explode =The explode() function breaks a string into an array.
  
--> shadow =applying a shadow format.  

--> autopct = autopct enables you to display the percent value using Python string formatting

--> startangle = where it should represent 
The default startangle is 0, which would start the "Frogs" slice on 
the positive x-axis. This example sets startangle = 90 such that 
everything is rotated counter-clockwise by 90 degrees, and the frog 
slice starts on the positive y-axis.

e,g1

from matplotlib import pyplot as plt

student_performance=["exelent","good","avg","poor"]
student_valuces=[15,25,35,45]
plt.figure(figsize=(8,10))

plt.pie(student_valuces,labels=student_performance,startangle=0,explode=[0.2,0.3,0,0],shadow=True,colors=["black","blue","red","yellow"],autopct="%1.1f%%")
plt.legend(title="performances")
plt.show()


=====> HISTOGRAM CHART IN MATPLOTLIB || HISTOGRAM GRAPH || 
			HISTOGRAM PLOT IN MATPLOTLIB


e,g 

from matplotlib import pyplot as plt

marks=[22,23,55,85,44,75,58,58,14]
grade=[0,21,25,22]
plt.title=("performances")
plt.hist(marks,grade,histtype="bar",rwidth=0.7,facecolor="blue")

plt.xticks([])
plt.show()


====>xticks( ) , yticks( ) , xlabel( ) , ylabel( ) , xlim( ) , ylim( ) IN MATPLOTLIB


from matplotlib import pyplot as plt

x=[10,20,30,40,50,60]
y=[100,200,300,400,500,600]

plt.plot(x,y)
plt.xlabel("x-axis")
plt.ylabel("y-axis")
#plt.xticks(x,["a","b","c","d","e","f"]) # exchenge the value x axis
#plt.yticks(y,["0-100","100-200","200-300","300-400","400-500","500-600"]) ## exchenge the value y axis

plt.xlim([10,100])
plt.ylim([200,1000])
plt.title("Grap")
plt.show()

